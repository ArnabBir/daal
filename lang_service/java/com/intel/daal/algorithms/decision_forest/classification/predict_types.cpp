/* file: predict_types.cpp */
/*******************************************************************************
* Copyright 2014-2017 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "daal.h"
#include "decision_forest/classification/prediction/JPredictionInput.h"

#include "common_helpers.h"

USING_COMMON_NAMESPACES()
using namespace daal::algorithms::decision_forest::classification::prediction;
namespace dfcp = daal::algorithms::decision_forest::classification::prediction;

/*
* Class:     com_intel_daal_algorithms_decision_forest_classification_prediction_PredictionInput
* Method:    cSetInputTable
* Signature: (JIJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1forest_classification_prediction_PredictionInput_cSetInputTable
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id, jlong ntAddr)
{
    if(id != classifier::prediction::data) return;

    jniInput<dfcp::Input>::set<classifier::prediction::NumericTableInputId, NumericTable>(inputAddr, id, ntAddr);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_classification_prediction_PredictionInput
* Method:    cGetInputTable
* Signature: (JI)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_classification_prediction_PredictionInput_cGetInputTable
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id)
{
    if(id != classifier::prediction::data) return (jlong)-1;

    return jniInput<dfcp::Input>::get<classifier::prediction::NumericTableInputId, NumericTable>(inputAddr, id);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_classification_prediction_PredictionInput
* Method:    cSetInputModel
* Signature: (JIJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1forest_classification_prediction_PredictionInput_cSetInputModel
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id, jlong ntAddr)
{
    if(id != classifier::prediction::model) return;

    jniInput<dfcp::Input>::set<classifier::prediction::ModelInputId, decision_forest::classification::Model>(inputAddr, id, ntAddr);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_classification_prediction_PredictionInput
* Method:    cGetInputModel
* Signature: (JI)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_classification_prediction_PredictionInput_cGetInputModel
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id, jlong ntAddr)
{
    if(id != classifier::prediction::model) return (jlong)-1;

    return jniInput<dfcp::Input>::get<classifier::prediction::ModelInputId, decision_forest::classification::Model>(inputAddr, id);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_classification_prediction_PredictionInput
* Method:    cInit
* Signature: (J)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_classification_prediction_PredictionInput_cInit
(JNIEnv *env, jobject thisObj, jlong algAddr)
{
    classifier::prediction::Input *inputPtr = NULL;

    SharedPtr<classifier::prediction::Batch> alg =
        staticPointerCast<classifier::prediction::Batch, AlgorithmIface>
        (*(SharedPtr<AlgorithmIface> *)algAddr);
    inputPtr = (alg->inputBase);

    return (jlong)inputPtr;
}
